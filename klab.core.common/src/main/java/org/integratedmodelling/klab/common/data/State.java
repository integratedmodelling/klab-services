/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.integratedmodelling.klab.common.data;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** State record */
@org.apache.avro.specific.AvroGenerated
public class State extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6449872848097658269L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"State\",\"namespace\":\"org.integratedmodelling.klab.common.data\",\"doc\":\"State record\",\"fields\":[{\"name\":\"urn\",\"type\":\"string\"},{\"name\":\"fillingCurve\",\"type\":[\"string\",\"null\"],\"default\":\"S2XY\"},{\"name\":\"doubleData\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}]},{\"name\":\"longData\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"long\"}]},{\"name\":\"intData\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}]},{\"name\":\"floatData\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"float\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<State> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<State> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<State> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<State> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<State> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this State to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a State from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a State instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static State fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence urn;
  private java.lang.CharSequence fillingCurve;
  private java.util.List<java.lang.Double> doubleData;
  private java.util.List<java.lang.Long> longData;
  private java.util.List<java.lang.Integer> intData;
  private java.util.List<java.lang.Float> floatData;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public State() {}

  /**
   * All-args constructor.
   * @param urn The new value for urn
   * @param fillingCurve The new value for fillingCurve
   * @param doubleData The new value for doubleData
   * @param longData The new value for longData
   * @param intData The new value for intData
   * @param floatData The new value for floatData
   */
  public State(java.lang.CharSequence urn, java.lang.CharSequence fillingCurve, java.util.List<java.lang.Double> doubleData, java.util.List<java.lang.Long> longData, java.util.List<java.lang.Integer> intData, java.util.List<java.lang.Float> floatData) {
    this.urn = urn;
    this.fillingCurve = fillingCurve;
    this.doubleData = doubleData;
    this.longData = longData;
    this.intData = intData;
    this.floatData = floatData;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return urn;
    case 1: return fillingCurve;
    case 2: return doubleData;
    case 3: return longData;
    case 4: return intData;
    case 5: return floatData;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: urn = (java.lang.CharSequence)value$; break;
    case 1: fillingCurve = (java.lang.CharSequence)value$; break;
    case 2: doubleData = (java.util.List<java.lang.Double>)value$; break;
    case 3: longData = (java.util.List<java.lang.Long>)value$; break;
    case 4: intData = (java.util.List<java.lang.Integer>)value$; break;
    case 5: floatData = (java.util.List<java.lang.Float>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'urn' field.
   * @return The value of the 'urn' field.
   */
  public java.lang.CharSequence getUrn() {
    return urn;
  }


  /**
   * Sets the value of the 'urn' field.
   * @param value the value to set.
   */
  public void setUrn(java.lang.CharSequence value) {
    this.urn = value;
  }

  /**
   * Gets the value of the 'fillingCurve' field.
   * @return The value of the 'fillingCurve' field.
   */
  public java.lang.CharSequence getFillingCurve() {
    return fillingCurve;
  }


  /**
   * Sets the value of the 'fillingCurve' field.
   * @param value the value to set.
   */
  public void setFillingCurve(java.lang.CharSequence value) {
    this.fillingCurve = value;
  }

  /**
   * Gets the value of the 'doubleData' field.
   * @return The value of the 'doubleData' field.
   */
  public java.util.List<java.lang.Double> getDoubleData() {
    return doubleData;
  }


  /**
   * Sets the value of the 'doubleData' field.
   * @param value the value to set.
   */
  public void setDoubleData(java.util.List<java.lang.Double> value) {
    this.doubleData = value;
  }

  /**
   * Gets the value of the 'longData' field.
   * @return The value of the 'longData' field.
   */
  public java.util.List<java.lang.Long> getLongData() {
    return longData;
  }


  /**
   * Sets the value of the 'longData' field.
   * @param value the value to set.
   */
  public void setLongData(java.util.List<java.lang.Long> value) {
    this.longData = value;
  }

  /**
   * Gets the value of the 'intData' field.
   * @return The value of the 'intData' field.
   */
  public java.util.List<java.lang.Integer> getIntData() {
    return intData;
  }


  /**
   * Sets the value of the 'intData' field.
   * @param value the value to set.
   */
  public void setIntData(java.util.List<java.lang.Integer> value) {
    this.intData = value;
  }

  /**
   * Gets the value of the 'floatData' field.
   * @return The value of the 'floatData' field.
   */
  public java.util.List<java.lang.Float> getFloatData() {
    return floatData;
  }


  /**
   * Sets the value of the 'floatData' field.
   * @param value the value to set.
   */
  public void setFloatData(java.util.List<java.lang.Float> value) {
    this.floatData = value;
  }

  /**
   * Creates a new State RecordBuilder.
   * @return A new State RecordBuilder
   */
  public static org.integratedmodelling.klab.common.data.State.Builder newBuilder() {
    return new org.integratedmodelling.klab.common.data.State.Builder();
  }

  /**
   * Creates a new State RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new State RecordBuilder
   */
  public static org.integratedmodelling.klab.common.data.State.Builder newBuilder(org.integratedmodelling.klab.common.data.State.Builder other) {
    if (other == null) {
      return new org.integratedmodelling.klab.common.data.State.Builder();
    } else {
      return new org.integratedmodelling.klab.common.data.State.Builder(other);
    }
  }

  /**
   * Creates a new State RecordBuilder by copying an existing State instance.
   * @param other The existing instance to copy.
   * @return A new State RecordBuilder
   */
  public static org.integratedmodelling.klab.common.data.State.Builder newBuilder(org.integratedmodelling.klab.common.data.State other) {
    if (other == null) {
      return new org.integratedmodelling.klab.common.data.State.Builder();
    } else {
      return new org.integratedmodelling.klab.common.data.State.Builder(other);
    }
  }

  /**
   * RecordBuilder for State instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<State>
    implements org.apache.avro.data.RecordBuilder<State> {

    private java.lang.CharSequence urn;
    private java.lang.CharSequence fillingCurve;
    private java.util.List<java.lang.Double> doubleData;
    private java.util.List<java.lang.Long> longData;
    private java.util.List<java.lang.Integer> intData;
    private java.util.List<java.lang.Float> floatData;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.integratedmodelling.klab.common.data.State.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.urn)) {
        this.urn = data().deepCopy(fields()[0].schema(), other.urn);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.fillingCurve)) {
        this.fillingCurve = data().deepCopy(fields()[1].schema(), other.fillingCurve);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.doubleData)) {
        this.doubleData = data().deepCopy(fields()[2].schema(), other.doubleData);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.longData)) {
        this.longData = data().deepCopy(fields()[3].schema(), other.longData);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.intData)) {
        this.intData = data().deepCopy(fields()[4].schema(), other.intData);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.floatData)) {
        this.floatData = data().deepCopy(fields()[5].schema(), other.floatData);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing State instance
     * @param other The existing instance to copy.
     */
    private Builder(org.integratedmodelling.klab.common.data.State other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.urn)) {
        this.urn = data().deepCopy(fields()[0].schema(), other.urn);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fillingCurve)) {
        this.fillingCurve = data().deepCopy(fields()[1].schema(), other.fillingCurve);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.doubleData)) {
        this.doubleData = data().deepCopy(fields()[2].schema(), other.doubleData);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.longData)) {
        this.longData = data().deepCopy(fields()[3].schema(), other.longData);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.intData)) {
        this.intData = data().deepCopy(fields()[4].schema(), other.intData);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.floatData)) {
        this.floatData = data().deepCopy(fields()[5].schema(), other.floatData);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'urn' field.
      * @return The value.
      */
    public java.lang.CharSequence getUrn() {
      return urn;
    }


    /**
      * Sets the value of the 'urn' field.
      * @param value The value of 'urn'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.State.Builder setUrn(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.urn = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'urn' field has been set.
      * @return True if the 'urn' field has been set, false otherwise.
      */
    public boolean hasUrn() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'urn' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.State.Builder clearUrn() {
      urn = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fillingCurve' field.
      * @return The value.
      */
    public java.lang.CharSequence getFillingCurve() {
      return fillingCurve;
    }


    /**
      * Sets the value of the 'fillingCurve' field.
      * @param value The value of 'fillingCurve'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.State.Builder setFillingCurve(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.fillingCurve = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fillingCurve' field has been set.
      * @return True if the 'fillingCurve' field has been set, false otherwise.
      */
    public boolean hasFillingCurve() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fillingCurve' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.State.Builder clearFillingCurve() {
      fillingCurve = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'doubleData' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getDoubleData() {
      return doubleData;
    }


    /**
      * Sets the value of the 'doubleData' field.
      * @param value The value of 'doubleData'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.State.Builder setDoubleData(java.util.List<java.lang.Double> value) {
      validate(fields()[2], value);
      this.doubleData = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'doubleData' field has been set.
      * @return True if the 'doubleData' field has been set, false otherwise.
      */
    public boolean hasDoubleData() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'doubleData' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.State.Builder clearDoubleData() {
      doubleData = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'longData' field.
      * @return The value.
      */
    public java.util.List<java.lang.Long> getLongData() {
      return longData;
    }


    /**
      * Sets the value of the 'longData' field.
      * @param value The value of 'longData'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.State.Builder setLongData(java.util.List<java.lang.Long> value) {
      validate(fields()[3], value);
      this.longData = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'longData' field has been set.
      * @return True if the 'longData' field has been set, false otherwise.
      */
    public boolean hasLongData() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'longData' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.State.Builder clearLongData() {
      longData = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'intData' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getIntData() {
      return intData;
    }


    /**
      * Sets the value of the 'intData' field.
      * @param value The value of 'intData'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.State.Builder setIntData(java.util.List<java.lang.Integer> value) {
      validate(fields()[4], value);
      this.intData = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'intData' field has been set.
      * @return True if the 'intData' field has been set, false otherwise.
      */
    public boolean hasIntData() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'intData' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.State.Builder clearIntData() {
      intData = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'floatData' field.
      * @return The value.
      */
    public java.util.List<java.lang.Float> getFloatData() {
      return floatData;
    }


    /**
      * Sets the value of the 'floatData' field.
      * @param value The value of 'floatData'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.State.Builder setFloatData(java.util.List<java.lang.Float> value) {
      validate(fields()[5], value);
      this.floatData = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'floatData' field has been set.
      * @return True if the 'floatData' field has been set, false otherwise.
      */
    public boolean hasFloatData() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'floatData' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.State.Builder clearFloatData() {
      floatData = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public State build() {
      try {
        State record = new State();
        record.urn = fieldSetFlags()[0] ? this.urn : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.fillingCurve = fieldSetFlags()[1] ? this.fillingCurve : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.doubleData = fieldSetFlags()[2] ? this.doubleData : (java.util.List<java.lang.Double>) defaultValue(fields()[2]);
        record.longData = fieldSetFlags()[3] ? this.longData : (java.util.List<java.lang.Long>) defaultValue(fields()[3]);
        record.intData = fieldSetFlags()[4] ? this.intData : (java.util.List<java.lang.Integer>) defaultValue(fields()[4]);
        record.floatData = fieldSetFlags()[5] ? this.floatData : (java.util.List<java.lang.Float>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<State>
    WRITER$ = (org.apache.avro.io.DatumWriter<State>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<State>
    READER$ = (org.apache.avro.io.DatumReader<State>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.urn);

    if (this.fillingCurve == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.fillingCurve);
    }

    if (this.doubleData == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.doubleData.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.Double e0: this.doubleData) {
        actualSize0++;
        out.startItem();
        out.writeDouble(e0);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.longData == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.longData.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.lang.Long e1: this.longData) {
        actualSize1++;
        out.startItem();
        out.writeLong(e1);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

    if (this.intData == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size2 = this.intData.size();
      out.writeArrayStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (java.lang.Integer e2: this.intData) {
        actualSize2++;
        out.startItem();
        out.writeInt(e2);
      }
      out.writeArrayEnd();
      if (actualSize2 != size2)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }

    if (this.floatData == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size3 = this.floatData.size();
      out.writeArrayStart();
      out.setItemCount(size3);
      long actualSize3 = 0;
      for (java.lang.Float e3: this.floatData) {
        actualSize3++;
        out.startItem();
        out.writeFloat(e3);
      }
      out.writeArrayEnd();
      if (actualSize3 != size3)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.urn = in.readString(this.urn instanceof Utf8 ? (Utf8)this.urn : null);

      if (in.readIndex() != 0) {
        in.readNull();
        this.fillingCurve = null;
      } else {
        this.fillingCurve = in.readString(this.fillingCurve instanceof Utf8 ? (Utf8)this.fillingCurve : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.doubleData = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.Double> a0 = this.doubleData;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.Double>((int)size0, SCHEMA$.getField("doubleData").schema().getTypes().get(1));
          this.doubleData = a0;
        } else a0.clear();
        SpecificData.Array<java.lang.Double> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.Double e0 = (ga0 != null ? ga0.peek() : null);
            e0 = in.readDouble();
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.longData = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<java.lang.Long> a1 = this.longData;
        if (a1 == null) {
          a1 = new SpecificData.Array<java.lang.Long>((int)size1, SCHEMA$.getField("longData").schema().getTypes().get(1));
          this.longData = a1;
        } else a1.clear();
        SpecificData.Array<java.lang.Long> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Long>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            java.lang.Long e1 = (ga1 != null ? ga1.peek() : null);
            e1 = in.readLong();
            a1.add(e1);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.intData = null;
      } else {
        long size2 = in.readArrayStart();
        java.util.List<java.lang.Integer> a2 = this.intData;
        if (a2 == null) {
          a2 = new SpecificData.Array<java.lang.Integer>((int)size2, SCHEMA$.getField("intData").schema().getTypes().get(1));
          this.intData = a2;
        } else a2.clear();
        SpecificData.Array<java.lang.Integer> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a2 : null);
        for ( ; 0 < size2; size2 = in.arrayNext()) {
          for ( ; size2 != 0; size2--) {
            java.lang.Integer e2 = (ga2 != null ? ga2.peek() : null);
            e2 = in.readInt();
            a2.add(e2);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.floatData = null;
      } else {
        long size3 = in.readArrayStart();
        java.util.List<java.lang.Float> a3 = this.floatData;
        if (a3 == null) {
          a3 = new SpecificData.Array<java.lang.Float>((int)size3, SCHEMA$.getField("floatData").schema().getTypes().get(1));
          this.floatData = a3;
        } else a3.clear();
        SpecificData.Array<java.lang.Float> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a3 : null);
        for ( ; 0 < size3; size3 = in.arrayNext()) {
          for ( ; size3 != 0; size3--) {
            java.lang.Float e3 = (ga3 != null ? ga3.peek() : null);
            e3 = in.readFloat();
            a3.add(e3);
          }
        }
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.urn = in.readString(this.urn instanceof Utf8 ? (Utf8)this.urn : null);
          break;

        case 1:
          if (in.readIndex() != 0) {
            in.readNull();
            this.fillingCurve = null;
          } else {
            this.fillingCurve = in.readString(this.fillingCurve instanceof Utf8 ? (Utf8)this.fillingCurve : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.doubleData = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.Double> a0 = this.doubleData;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.Double>((int)size0, SCHEMA$.getField("doubleData").schema().getTypes().get(1));
              this.doubleData = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.Double> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.Double e0 = (ga0 != null ? ga0.peek() : null);
                e0 = in.readDouble();
                a0.add(e0);
              }
            }
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.longData = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<java.lang.Long> a1 = this.longData;
            if (a1 == null) {
              a1 = new SpecificData.Array<java.lang.Long>((int)size1, SCHEMA$.getField("longData").schema().getTypes().get(1));
              this.longData = a1;
            } else a1.clear();
            SpecificData.Array<java.lang.Long> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Long>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                java.lang.Long e1 = (ga1 != null ? ga1.peek() : null);
                e1 = in.readLong();
                a1.add(e1);
              }
            }
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.intData = null;
          } else {
            long size2 = in.readArrayStart();
            java.util.List<java.lang.Integer> a2 = this.intData;
            if (a2 == null) {
              a2 = new SpecificData.Array<java.lang.Integer>((int)size2, SCHEMA$.getField("intData").schema().getTypes().get(1));
              this.intData = a2;
            } else a2.clear();
            SpecificData.Array<java.lang.Integer> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a2 : null);
            for ( ; 0 < size2; size2 = in.arrayNext()) {
              for ( ; size2 != 0; size2--) {
                java.lang.Integer e2 = (ga2 != null ? ga2.peek() : null);
                e2 = in.readInt();
                a2.add(e2);
              }
            }
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.floatData = null;
          } else {
            long size3 = in.readArrayStart();
            java.util.List<java.lang.Float> a3 = this.floatData;
            if (a3 == null) {
              a3 = new SpecificData.Array<java.lang.Float>((int)size3, SCHEMA$.getField("floatData").schema().getTypes().get(1));
              this.floatData = a3;
            } else a3.clear();
            SpecificData.Array<java.lang.Float> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a3 : null);
            for ( ; 0 < size3; size3 = in.arrayNext()) {
              for ( ; size3 != 0; size3--) {
                java.lang.Float e3 = (ga3 != null ? ga3.peek() : null);
                e3 = in.readFloat();
                a3.add(e3);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










