/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.integratedmodelling.klab.common.data;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** The data request sent to the ResourcesService endpoint. It may include an Instance to satisfy
dependencies for adapters that require input besides parameters. */
@org.apache.avro.specific.AvroGenerated
public class DataRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2133430548505889805L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataRequest\",\"namespace\":\"org.integratedmodelling.klab.common.data\",\"doc\":\"The data request sent to the ResourcesService endpoint. It may include an Instance to satisfy\\r\\ndependencies for adapters that require input besides parameters.\",\"fields\":[{\"name\":\"observable\",\"type\":\"string\"},{\"name\":\"geometry\",\"type\":\"string\"},{\"name\":\"startTime\",\"type\":\"long\"},{\"name\":\"endTime\",\"type\":\"long\"},{\"name\":\"resourceUrns\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"inputData\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Instance\",\"doc\":\"The payload of any contextualization is a top-level Instance. Any ERROR-level\\r\\nnotification in the top-level Instance means that contextualization has failed.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"geometry\",\"type\":\"string\"},{\"name\":\"observable\",\"type\":\"string\"},{\"name\":\"fillingCurve\",\"type\":[\"string\",\"null\"],\"default\":\"DN_LINEAR\"},{\"name\":\"empty\",\"type\":\"boolean\",\"default\":false},{\"name\":\"notifications\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Notification\",\"fields\":[{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"activityUrn\",\"type\":[\"null\",\"string\"]},{\"name\":\"metadata\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"name\":\"code\",\"type\":[\"null\",\"int\"]},{\"name\":\"level\",\"type\":{\"type\":\"enum\",\"name\":\"Level\",\"symbols\":[\"DEBUG\",\"INFO\",\"WARNING\",\"ERROR\"]}}]}}},{\"name\":\"metadata\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"instances\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Instance\"}]},{\"name\":\"doubleData\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}]},{\"name\":\"longData\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"long\"}]},{\"name\":\"intData\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}]},{\"name\":\"floatData\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"float\"}]},{\"name\":\"dataKey\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DataRequest> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DataRequest> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DataRequest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DataRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DataRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DataRequest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DataRequest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DataRequest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DataRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence observable;
  private java.lang.CharSequence geometry;
  private long startTime;
  private long endTime;
  private java.util.List<java.lang.CharSequence> resourceUrns;
  private org.integratedmodelling.klab.common.data.Instance inputData;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataRequest() {}

  /**
   * All-args constructor.
   * @param observable The new value for observable
   * @param geometry The new value for geometry
   * @param startTime The new value for startTime
   * @param endTime The new value for endTime
   * @param resourceUrns The new value for resourceUrns
   * @param inputData The new value for inputData
   */
  public DataRequest(java.lang.CharSequence observable, java.lang.CharSequence geometry, java.lang.Long startTime, java.lang.Long endTime, java.util.List<java.lang.CharSequence> resourceUrns, org.integratedmodelling.klab.common.data.Instance inputData) {
    this.observable = observable;
    this.geometry = geometry;
    this.startTime = startTime;
    this.endTime = endTime;
    this.resourceUrns = resourceUrns;
    this.inputData = inputData;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return observable;
    case 1: return geometry;
    case 2: return startTime;
    case 3: return endTime;
    case 4: return resourceUrns;
    case 5: return inputData;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: observable = (java.lang.CharSequence)value$; break;
    case 1: geometry = (java.lang.CharSequence)value$; break;
    case 2: startTime = (java.lang.Long)value$; break;
    case 3: endTime = (java.lang.Long)value$; break;
    case 4: resourceUrns = (java.util.List<java.lang.CharSequence>)value$; break;
    case 5: inputData = (org.integratedmodelling.klab.common.data.Instance)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'observable' field.
   * @return The value of the 'observable' field.
   */
  public java.lang.CharSequence getObservable() {
    return observable;
  }


  /**
   * Sets the value of the 'observable' field.
   * @param value the value to set.
   */
  public void setObservable(java.lang.CharSequence value) {
    this.observable = value;
  }

  /**
   * Gets the value of the 'geometry' field.
   * @return The value of the 'geometry' field.
   */
  public java.lang.CharSequence getGeometry() {
    return geometry;
  }


  /**
   * Sets the value of the 'geometry' field.
   * @param value the value to set.
   */
  public void setGeometry(java.lang.CharSequence value) {
    this.geometry = value;
  }

  /**
   * Gets the value of the 'startTime' field.
   * @return The value of the 'startTime' field.
   */
  public long getStartTime() {
    return startTime;
  }


  /**
   * Sets the value of the 'startTime' field.
   * @param value the value to set.
   */
  public void setStartTime(long value) {
    this.startTime = value;
  }

  /**
   * Gets the value of the 'endTime' field.
   * @return The value of the 'endTime' field.
   */
  public long getEndTime() {
    return endTime;
  }


  /**
   * Sets the value of the 'endTime' field.
   * @param value the value to set.
   */
  public void setEndTime(long value) {
    this.endTime = value;
  }

  /**
   * Gets the value of the 'resourceUrns' field.
   * @return The value of the 'resourceUrns' field.
   */
  public java.util.List<java.lang.CharSequence> getResourceUrns() {
    return resourceUrns;
  }


  /**
   * Sets the value of the 'resourceUrns' field.
   * @param value the value to set.
   */
  public void setResourceUrns(java.util.List<java.lang.CharSequence> value) {
    this.resourceUrns = value;
  }

  /**
   * Gets the value of the 'inputData' field.
   * @return The value of the 'inputData' field.
   */
  public org.integratedmodelling.klab.common.data.Instance getInputData() {
    return inputData;
  }


  /**
   * Sets the value of the 'inputData' field.
   * @param value the value to set.
   */
  public void setInputData(org.integratedmodelling.klab.common.data.Instance value) {
    this.inputData = value;
  }

  /**
   * Creates a new DataRequest RecordBuilder.
   * @return A new DataRequest RecordBuilder
   */
  public static org.integratedmodelling.klab.common.data.DataRequest.Builder newBuilder() {
    return new org.integratedmodelling.klab.common.data.DataRequest.Builder();
  }

  /**
   * Creates a new DataRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataRequest RecordBuilder
   */
  public static org.integratedmodelling.klab.common.data.DataRequest.Builder newBuilder(org.integratedmodelling.klab.common.data.DataRequest.Builder other) {
    if (other == null) {
      return new org.integratedmodelling.klab.common.data.DataRequest.Builder();
    } else {
      return new org.integratedmodelling.klab.common.data.DataRequest.Builder(other);
    }
  }

  /**
   * Creates a new DataRequest RecordBuilder by copying an existing DataRequest instance.
   * @param other The existing instance to copy.
   * @return A new DataRequest RecordBuilder
   */
  public static org.integratedmodelling.klab.common.data.DataRequest.Builder newBuilder(org.integratedmodelling.klab.common.data.DataRequest other) {
    if (other == null) {
      return new org.integratedmodelling.klab.common.data.DataRequest.Builder();
    } else {
      return new org.integratedmodelling.klab.common.data.DataRequest.Builder(other);
    }
  }

  /**
   * RecordBuilder for DataRequest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataRequest>
    implements org.apache.avro.data.RecordBuilder<DataRequest> {

    private java.lang.CharSequence observable;
    private java.lang.CharSequence geometry;
    private long startTime;
    private long endTime;
    private java.util.List<java.lang.CharSequence> resourceUrns;
    private org.integratedmodelling.klab.common.data.Instance inputData;
    private org.integratedmodelling.klab.common.data.Instance.Builder inputDataBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.integratedmodelling.klab.common.data.DataRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.observable)) {
        this.observable = data().deepCopy(fields()[0].schema(), other.observable);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.geometry)) {
        this.geometry = data().deepCopy(fields()[1].schema(), other.geometry);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.startTime)) {
        this.startTime = data().deepCopy(fields()[2].schema(), other.startTime);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.endTime)) {
        this.endTime = data().deepCopy(fields()[3].schema(), other.endTime);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.resourceUrns)) {
        this.resourceUrns = data().deepCopy(fields()[4].schema(), other.resourceUrns);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.inputData)) {
        this.inputData = data().deepCopy(fields()[5].schema(), other.inputData);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasInputDataBuilder()) {
        this.inputDataBuilder = org.integratedmodelling.klab.common.data.Instance.newBuilder(other.getInputDataBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing DataRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(org.integratedmodelling.klab.common.data.DataRequest other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.observable)) {
        this.observable = data().deepCopy(fields()[0].schema(), other.observable);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.geometry)) {
        this.geometry = data().deepCopy(fields()[1].schema(), other.geometry);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.startTime)) {
        this.startTime = data().deepCopy(fields()[2].schema(), other.startTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.endTime)) {
        this.endTime = data().deepCopy(fields()[3].schema(), other.endTime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.resourceUrns)) {
        this.resourceUrns = data().deepCopy(fields()[4].schema(), other.resourceUrns);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.inputData)) {
        this.inputData = data().deepCopy(fields()[5].schema(), other.inputData);
        fieldSetFlags()[5] = true;
      }
      this.inputDataBuilder = null;
    }

    /**
      * Gets the value of the 'observable' field.
      * @return The value.
      */
    public java.lang.CharSequence getObservable() {
      return observable;
    }


    /**
      * Sets the value of the 'observable' field.
      * @param value The value of 'observable'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.DataRequest.Builder setObservable(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.observable = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'observable' field has been set.
      * @return True if the 'observable' field has been set, false otherwise.
      */
    public boolean hasObservable() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'observable' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.DataRequest.Builder clearObservable() {
      observable = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'geometry' field.
      * @return The value.
      */
    public java.lang.CharSequence getGeometry() {
      return geometry;
    }


    /**
      * Sets the value of the 'geometry' field.
      * @param value The value of 'geometry'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.DataRequest.Builder setGeometry(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.geometry = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'geometry' field has been set.
      * @return True if the 'geometry' field has been set, false otherwise.
      */
    public boolean hasGeometry() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'geometry' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.DataRequest.Builder clearGeometry() {
      geometry = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'startTime' field.
      * @return The value.
      */
    public long getStartTime() {
      return startTime;
    }


    /**
      * Sets the value of the 'startTime' field.
      * @param value The value of 'startTime'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.DataRequest.Builder setStartTime(long value) {
      validate(fields()[2], value);
      this.startTime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'startTime' field has been set.
      * @return True if the 'startTime' field has been set, false otherwise.
      */
    public boolean hasStartTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'startTime' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.DataRequest.Builder clearStartTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'endTime' field.
      * @return The value.
      */
    public long getEndTime() {
      return endTime;
    }


    /**
      * Sets the value of the 'endTime' field.
      * @param value The value of 'endTime'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.DataRequest.Builder setEndTime(long value) {
      validate(fields()[3], value);
      this.endTime = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'endTime' field has been set.
      * @return True if the 'endTime' field has been set, false otherwise.
      */
    public boolean hasEndTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'endTime' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.DataRequest.Builder clearEndTime() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'resourceUrns' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getResourceUrns() {
      return resourceUrns;
    }


    /**
      * Sets the value of the 'resourceUrns' field.
      * @param value The value of 'resourceUrns'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.DataRequest.Builder setResourceUrns(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.resourceUrns = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'resourceUrns' field has been set.
      * @return True if the 'resourceUrns' field has been set, false otherwise.
      */
    public boolean hasResourceUrns() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'resourceUrns' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.DataRequest.Builder clearResourceUrns() {
      resourceUrns = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'inputData' field.
      * @return The value.
      */
    public org.integratedmodelling.klab.common.data.Instance getInputData() {
      return inputData;
    }


    /**
      * Sets the value of the 'inputData' field.
      * @param value The value of 'inputData'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.DataRequest.Builder setInputData(org.integratedmodelling.klab.common.data.Instance value) {
      validate(fields()[5], value);
      this.inputDataBuilder = null;
      this.inputData = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'inputData' field has been set.
      * @return True if the 'inputData' field has been set, false otherwise.
      */
    public boolean hasInputData() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'inputData' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.integratedmodelling.klab.common.data.Instance.Builder getInputDataBuilder() {
      if (inputDataBuilder == null) {
        if (hasInputData()) {
          setInputDataBuilder(org.integratedmodelling.klab.common.data.Instance.newBuilder(inputData));
        } else {
          setInputDataBuilder(org.integratedmodelling.klab.common.data.Instance.newBuilder());
        }
      }
      return inputDataBuilder;
    }

    /**
     * Sets the Builder instance for the 'inputData' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.integratedmodelling.klab.common.data.DataRequest.Builder setInputDataBuilder(org.integratedmodelling.klab.common.data.Instance.Builder value) {
      clearInputData();
      inputDataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'inputData' field has an active Builder instance
     * @return True if the 'inputData' field has an active Builder instance
     */
    public boolean hasInputDataBuilder() {
      return inputDataBuilder != null;
    }

    /**
      * Clears the value of the 'inputData' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.common.data.DataRequest.Builder clearInputData() {
      inputData = null;
      inputDataBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DataRequest build() {
      try {
        DataRequest record = new DataRequest();
        record.observable = fieldSetFlags()[0] ? this.observable : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.geometry = fieldSetFlags()[1] ? this.geometry : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.startTime = fieldSetFlags()[2] ? this.startTime : (java.lang.Long) defaultValue(fields()[2]);
        record.endTime = fieldSetFlags()[3] ? this.endTime : (java.lang.Long) defaultValue(fields()[3]);
        record.resourceUrns = fieldSetFlags()[4] ? this.resourceUrns : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        if (inputDataBuilder != null) {
          try {
            record.inputData = this.inputDataBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("inputData"));
            throw e;
          }
        } else {
          record.inputData = fieldSetFlags()[5] ? this.inputData : (org.integratedmodelling.klab.common.data.Instance) defaultValue(fields()[5]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DataRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<DataRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DataRequest>
    READER$ = (org.apache.avro.io.DatumReader<DataRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.observable);

    out.writeString(this.geometry);

    out.writeLong(this.startTime);

    out.writeLong(this.endTime);

    long size0 = this.resourceUrns.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.resourceUrns) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    if (this.inputData == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.inputData.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.observable = in.readString(this.observable instanceof Utf8 ? (Utf8)this.observable : null);

      this.geometry = in.readString(this.geometry instanceof Utf8 ? (Utf8)this.geometry : null);

      this.startTime = in.readLong();

      this.endTime = in.readLong();

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.resourceUrns;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("resourceUrns").schema());
        this.resourceUrns = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.inputData = null;
      } else {
        if (this.inputData == null) {
          this.inputData = new org.integratedmodelling.klab.common.data.Instance();
        }
        this.inputData.customDecode(in);
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.observable = in.readString(this.observable instanceof Utf8 ? (Utf8)this.observable : null);
          break;

        case 1:
          this.geometry = in.readString(this.geometry instanceof Utf8 ? (Utf8)this.geometry : null);
          break;

        case 2:
          this.startTime = in.readLong();
          break;

        case 3:
          this.endTime = in.readLong();
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.resourceUrns;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("resourceUrns").schema());
            this.resourceUrns = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.inputData = null;
          } else {
            if (this.inputData == null) {
              this.inputData = new org.integratedmodelling.klab.common.data.Instance();
            }
            this.inputData.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










